DROP VIEW IF EXISTS STUDENT_ENROLLMENT;
DROP TABLE IF EXISTS Review_Section;
DROP TABLE IF EXISTS DEGREE_INFO;
DROP TABLE IF EXISTS Thesis;
DROP TABLE IF EXISTS Faculty;
DROP TABLE IF EXISTS Probation;
DROP TABLE IF EXISTS COURSEENROLLMENT;
DROP TABLE IF EXISTS PASTCLASS;
DROP TABLE IF EXISTS SECTION;
DROP TABLE IF EXISTS PASTCLASS;
DROP TABLE IF EXISTS PASTCLASSES;
DROP TABLE IF EXISTS Review_Section;
DROP TABLE IF EXISTS Class;
DROP TABLE IF EXISTS COURSE;
DROP TABLE IF EXISTS Student;
DROP TABLE IF EXISTS DEPARTMENT;



CREATE TABLE Student (
    STUDENTID VARCHAR(50) PRIMARY KEY,
	SSN INT,
    FIRSTNAME VARCHAR(50),
    MIDDLENAME VARCHAR(50),
    LASTNAME VARCHAR(50),
    Enrolled INT,
    Citizenship INT,
    DegreeName VARCHAR(50)ï¼Œ
    Major VARCHAR(50),
    FOREIGN KEY (DegreeName,Major) REFERENCES DEGREE_INFO(DEGREE_NAME,Major)
);
CREATE TABLE DEPARTMENT(
    DEPARTMENTNAME VARCHAR(200) PRIMARY KEY
);
CREATE TABLE Faculty (
	FACULTYNAME VARCHAR(255) PRIMARY KEY,
    TITLE VARCHAR(255),
    DEPARTMENT VARCHAR(255),
    FOREIGN KEY (DEPARTMENT) REFERENCES DEPARTMENT(DEPARTMENTNAME)
);
CREATE TABLE COURSE (
    COURSEID VARCHAR(20) PRIMARY KEY,
    COURSENAME VARCHAR(20),
    UNIT INT,
    GRADESTATUS VARCHAR(100),
    PREREQUISITES VARCHAR(100),
    GENERALTOPIC VARCHAR(100),
    INSTRUCTORCONSENT BOOLEAN,
    ISREQUIREDLABWORK BOOLEAN,
    ISLOWER BOOLEAN,
    DEPARTMENT VARCHAR(20),
    FOREIGN KEY (DEPARTMENT) REFERENCES DEPARTMENT(DEPARTMENTNAME)
);
CREATE TABLE Class (
    COURSEID VARCHAR(20),
    COURSETITLE VARCHAR(255),
    QUARTER VARCHAR(255),
    YEAR INT,
    PRIMARY KEY (COURSEID, QUARTER, YEAR),
    FOREIGN KEY (COURSEID) REFERENCES Course(COURSEID)
);
CREATE TABLE SECTION(
    SECTIONID VARCHAR(20),
    COURSEID VARCHAR(20),
    QUARTER VARCHAR(255),
    YEAR INT,
    PRIMARY KEY (SECTIONID, COURSEID, QUARTER, YEAR),
    FOREIGN KEY (COURSEID, QUARTER, YEAR) REFERENCES CLASS (COURSEID, QUARTER, YEAR)
);

CREATE TABLE COURSEENROLLMENT (
    STUDENTID VARCHAR(50),
    COURSEID VARCHAR(20),
    SECTIONID VARCHAR(20),
	Quarter VARCHAR(255),
    Year INT,
    unit INT,
    GRADEOPTION INT,
    GRADE VARCHAR(10),
    PRIMARY KEY (STUDENTID,COURSEID,SECTIONID),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(STUDENTID),
    FOREIGN KEY (COURSEID) REFERENCES COURSE(COURSEID),
    FOREIGN KEY (SECTIONID, COURSEID, QUARTER, YEAR) REFERENCES SECTION(SECTIONID, COURSEID, QUARTER, YEAR)
);

CREATE TABLE PASTCLASS (
    STUDENTID VARCHAR(50),
    COURSEID VARCHAR(20),
    SECTIONID VARCHAR(20),
    Quarter VARCHAR(255),
    Year INT,
    unit INT,
    GRADEOPTION INT,
    PRIMARY KEY (STUDENTID,COURSEID,SECTIONID,QUARTER,YEAR),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(STUDENTID),
    FOREIGN KEY (COURSEID, QUARTER, YEAR) REFERENCES CLASS(COURSEID, QUARTER, YEAR),
    FOREIGN KEY (SECTIONID, COURSEID, QUARTER, YEAR) REFERENCES SECTION(SECTIONID, COURSEID, QUARTER, YEAR)

);
CREATE TABLE Thesis (
    STUDENTID VARCHAR(255) PRIMARY KEY,
    ADVISORID VARCHAR(255),
    TOPIC VARCHAR(255),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(STUDENTID),
    FOREIGN KEY (ADVISORID) REFERENCES FACULTY(FACULTYNAME)
);


CREATE EXTENSION IF NOT EXISTS btree_gist;

CREATE TABLE Probation (
    STUDENTID VARCHAR(50),
    PROBATIONID VARCHAR(50),
	STARTDATE DATE,
    ENDDATE DATE,
    REASON VARCHAR(255),
    PRIMARY KEY (STUDENTID, PROBATIONID),
    FOREIGN KEY (STUDENTID) REFERENCES Student(STUDENTID),
	CONSTRAINT valid_period CHECK (STARTDATE < ENDDATE),
    CONSTRAINT unique_period UNIQUE (STUDENTID, STARTDATE, ENDDATE),
    CONSTRAINT no_overlap EXCLUDE USING GIST (
        STUDENTID WITH =,
        tsrange(STARTDATE, ENDDATE, '[)') WITH &&
    )
);

CREATE TABLE Review_Section (
    COURSEID VARCHAR(20),
	Quarter VARCHAR(255),
    Year INT,
    SECTIONID VARCHAR(20),
	STARTTIME TIMESTAMP,
    ENDTIME TIMESTAMP,
    BUILDING VARCHAR(255),
    PRIMARY KEY (COURSEID, SECTIONID, STARTTIME, ENDTIME),
    FOREIGN KEY (COURSEID,SECTIONID, QUARTER, YEAR) REFERENCES SECTION(COURSEID,SECTIONID, QUARTER, YEAR),
	CONSTRAINT valid_review_period CHECK (STARTTIME < ENDTIME),
    CONSTRAINT unique_review_period UNIQUE (STARTTIME, ENDTIME, BUILDING),
    CONSTRAINT no_review_overlap EXCLUDE USING GIST (
        SECTIONID WITH =,
        COURSEID WITH =,
        tsrange(STARTTIME, ENDTIME, '[)') WITH &&
    )
);

CREATE TABLE DEGREE_INFO (
	DEGREE_NAME VARCHAR(50),
    DEPARTMENT_NAME VARCHAR(50),
    Major VARCHAR(50),
    UNIT INT,
    GRADE VARCHAR(10),
	PRIMARY KEY (DEGREE_NAME),
	FOREIGN KEY (DEPARTMENT_NAME) REFERENCES DEPARTMENT(DEPARTMENTNAME)
);

CREATE VIEW STUDENT_ENROLLMENT AS
SELECT studentid, courseid, sectionid, quarter, year, unit, gradeoption FROM courseenrollment
UNION
SELECT  studentid, courseid, sectionid, quarter, year, unit, gradeoption  FROM pastclass;

CREATE VIEW ENROLLEDSTUDENTS AS SELECT * FROM STUDENT WHERE enrolled = 1;
