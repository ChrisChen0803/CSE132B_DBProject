DROP VIEW IF EXISTS STUDENT_ENROLLMENT CASCADE;
DROP TABLE IF EXISTS Review_Section CASCADE;
DROP TABLE IF EXISTS DEGREE_INFO CASCADE;
DROP TABLE IF EXISTS Thesis CASCADE;
DROP TABLE IF EXISTS Faculty CASCADE;
DROP TABLE IF EXISTS Probation CASCADE;
DROP TABLE IF EXISTS COURSEENROLLMENT CASCADE;
DROP TABLE IF EXISTS PASTCLASS CASCADE;
DROP TABLE IF EXISTS SECTION CASCADE;
DROP TABLE IF EXISTS PASTCLASS CASCADE;
DROP TABLE IF EXISTS Degree_Classes CASCADE;
DROP TABLE IF EXISTS Review_Section CASCADE;
DROP TABLE IF EXISTS Class CASCADE;
DROP TABLE IF EXISTS COURSE CASCADE;
DROP TABLE IF EXISTS Student CASCADE;
DROP TABLE IF EXISTS DEPARTMENT CASCADE;
DROP TABLE IF EXISTS GRADE_CONVERSION CASCADE;
DROP TABLE IF EXISTS regular_meeting CASCADE;
DROP TABLE IF EXISTS CPQG CASCADE;
DROP TABLE IF EXISTS CPG CASCADE;


CREATE TABLE DEPARTMENT(
    DEPARTMENTNAME VARCHAR(200) PRIMARY KEY
);

CREATE TABLE DEGREE_INFO (
	DEGREE_NAME VARCHAR(50) ,
    DEPARTMENT_NAME VARCHAR(50),
    Major VARCHAR(50),
    UNIT INT,
    GRADE VARCHAR(10),
	PRIMARY KEY (DEGREE_NAME, Major),
	FOREIGN KEY (DEPARTMENT_NAME) REFERENCES DEPARTMENT(DEPARTMENTNAME)
);

CREATE TABLE Student (
    STUDENTID VARCHAR(50) PRIMARY KEY,
	SSN INT,
    FIRSTNAME VARCHAR(50),
    MIDDLENAME VARCHAR(50),
    LASTNAME VARCHAR(50),
    Enrolled INT,
    Citizenship INT,
    DegreeName VARCHAR(50),
    Major VARCHAR(50),
    FOREIGN KEY (DegreeName,Major) REFERENCES DEGREE_INFO(DEGREE_NAME,Major)
);

CREATE TABLE Faculty (
	FACULTYNAME VARCHAR(255) PRIMARY KEY,
    TITLE VARCHAR(255),
    DEPARTMENT VARCHAR(255),
    FOREIGN KEY (DEPARTMENT) REFERENCES DEPARTMENT(DEPARTMENTNAME)
);
CREATE TABLE COURSE (
    COURSEID VARCHAR(20) PRIMARY KEY,
    COURSENAME VARCHAR(20),
    UNIT INT,
    GRADESTATUS VARCHAR(100),
    PREREQUISITES VARCHAR(100),
    GENERALTOPIC VARCHAR(100),
    INSTRUCTORCONSENT BOOLEAN,
    ISREQUIREDLABWORK BOOLEAN,
    ISLOWER BOOLEAN,
    DEPARTMENT VARCHAR(20),
    FOREIGN KEY (DEPARTMENT) REFERENCES DEPARTMENT(DEPARTMENTNAME)
);
CREATE TABLE Class (
    COURSEID VARCHAR(20),
    COURSETITLE VARCHAR(255),
    QUARTER VARCHAR(255),
    YEAR INT,
    PRIMARY KEY (COURSEID, QUARTER, YEAR),
    FOREIGN KEY (COURSEID) REFERENCES Course(COURSEID)
);
CREATE TABLE SECTION(
    SECTIONID VARCHAR(20),
    COURSEID VARCHAR(20),
    QUARTER VARCHAR(255),
    YEAR INT,
    FacultyName VARCHAR,
    ENROLLMENT_LIMIT INT,
    PRIMARY KEY (SECTIONID, COURSEID, QUARTER, YEAR),
    FOREIGN KEY (COURSEID, QUARTER, YEAR) REFERENCES CLASS (COURSEID, QUARTER, YEAR),
    FOREIGN KEY (FacultyName) REFERENCES Faculty(FACULTYNAME)
);

CREATE TABLE COURSEENROLLMENT (
    STUDENTID VARCHAR(50),
    COURSEID VARCHAR(20),
    SECTIONID VARCHAR(20),
	Quarter VARCHAR(255),
    Year INT,
    unit INT,
    GRADEOPTION INT,
    GRADE VARCHAR(10),
    PRIMARY KEY (STUDENTID,COURSEID,SECTIONID),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(STUDENTID),
    FOREIGN KEY (COURSEID) REFERENCES COURSE(COURSEID),
    FOREIGN KEY (SECTIONID, COURSEID, QUARTER, YEAR) REFERENCES SECTION(SECTIONID, COURSEID, QUARTER, YEAR)
);

CREATE TABLE PASTCLASS (
    STUDENTID VARCHAR(50),
    COURSEID VARCHAR(20),
    SECTIONID VARCHAR(20),
    Quarter VARCHAR(255),
    Year INT,
    unit INT,
    GRADEOPTION INT,
    GRADE VARCHAR(10),
    FacultyName VARCHAR,
    PRIMARY KEY (STUDENTID,COURSEID,SECTIONID,QUARTER,YEAR),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(STUDENTID),
    FOREIGN KEY (COURSEID, QUARTER, YEAR) REFERENCES CLASS(COURSEID, QUARTER, YEAR),
    FOREIGN KEY (SECTIONID, COURSEID, QUARTER, YEAR) REFERENCES SECTION(SECTIONID, COURSEID, QUARTER, YEAR),
    FOREIGN KEY (FacultyName) REFERENCES Faculty(FACULTYNAME)
);
CREATE TABLE Thesis (
    STUDENTID VARCHAR(255) PRIMARY KEY,
    ADVISORID VARCHAR(255),
    TOPIC VARCHAR(255),
    FOREIGN KEY (STUDENTID) REFERENCES STUDENT(STUDENTID),
    FOREIGN KEY (ADVISORID) REFERENCES FACULTY(FACULTYNAME)
);


CREATE EXTENSION IF NOT EXISTS btree_gist;

CREATE TABLE Probation (
    STUDENTID VARCHAR(50),
    PROBATIONID VARCHAR(50),
	STARTDATE DATE,
    ENDDATE DATE,
    REASON VARCHAR(255),
    PRIMARY KEY (STUDENTID, PROBATIONID),
    FOREIGN KEY (STUDENTID) REFERENCES Student(STUDENTID),
	CONSTRAINT valid_period CHECK (STARTDATE < ENDDATE),
    CONSTRAINT unique_period UNIQUE (STUDENTID, STARTDATE, ENDDATE),
    CONSTRAINT no_overlap EXCLUDE USING GIST (
        STUDENTID WITH =,
        tsrange(STARTDATE, ENDDATE, '[)') WITH &&
    )
);

CREATE TABLE Review_Section (
    COURSEID VARCHAR(20),
	Quarter VARCHAR(255),
    Year INT,
    SECTIONID VARCHAR(20),
	STARTTIME TIMESTAMP,
    ENDTIME TIMESTAMP,
    BUILDING VARCHAR(255),
    PRIMARY KEY (COURSEID, SECTIONID, STARTTIME, ENDTIME),
    FOREIGN KEY (COURSEID,SECTIONID, QUARTER, YEAR) REFERENCES SECTION(COURSEID,SECTIONID, QUARTER, YEAR),
	CONSTRAINT valid_review_period CHECK (STARTTIME < ENDTIME),
    CONSTRAINT unique_review_period UNIQUE (STARTTIME, ENDTIME, BUILDING),
    CONSTRAINT no_review_overlap EXCLUDE USING GIST (
        SECTIONID WITH =,
        COURSEID WITH =,
        tsrange(STARTTIME, ENDTIME, '[)') WITH &&
    )
);

Create Table Degree_Classes(
	DegreeName VARCHAR(50),
	Major VARCHAR(50),
	Category VARCHAR(50),
	Classes VARCHAR(255),
	Unit INT,
	Grade VARCHAR(10),
	Primary Key (DegreeName,Major,Category),
	Foreign Key(DegreeName,Major) REFERENCES Degree_info(Degree_name,Major)
);

CREATE VIEW STUDENT_ENROLLMENT AS
SELECT studentid, courseid, sectionid, quarter, year, unit, gradeoption, grade FROM courseenrollment
UNION
SELECT  studentid, courseid, sectionid, quarter, year, unit, gradeoption, grade  FROM pastclass;

CREATE VIEW ENROLLEDSTUDENTS AS SELECT * FROM STUDENT WHERE enrolled = 1;

create table GRADE_CONVERSION(
		  LETTER_GRADE CHAR(2) NOT NULL,
		  NUMBER_GRADE DECIMAL(2,1)
);

CREATE TABLE regular_meeting (
    meetingid SERIAL PRIMARY KEY,
    SECTIONID VARCHAR(20),
    COURSEID VARCHAR(20),
    QUARTER VARCHAR(255),
    YEAR INT,
    day_of_week VARCHAR(10),
    start_time TIME,
    end_time TIME,
    building VARCHAR(100),
    type VARCHAR(50),
    FOREIGN KEY (SECTIONID, COURSEID, QUARTER, YEAR) REFERENCES section(SECTIONID, COURSEID, QUARTER, YEAR)
);

CREATE OR REPLACE FUNCTION trg_time_conflict()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1 FROM REGULAR_MEETING
        WHERE sectionid = NEW.sectionid
          AND courseid = NEW.courseid

          AND day_of_week SIMILAR TO '%' || NEW.day_of_week || '%'
          AND meetingid != NEW.meetingid
          AND (
               (NEW.end_time < end_time AND NEW.end_time > start_time)
            OR (start_time < NEW.start_time AND end_time > NEW.start_time)
            OR (NEW.start_time < start_time AND NEW.end_time > end_time)
          )
    ) THEN
        RAISE EXCEPTION 'Meeting times for the section overlap.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_time_conflict
BEFORE INSERT OR UPDATE ON REGULAR_MEETING
FOR EACH ROW
EXECUTE FUNCTION trg_time_conflict();

CREATE OR REPLACE FUNCTION trg_enrollment_limit()
RETURNS TRIGGER AS $$
DECLARE
    enroll_limit INTEGER;
    current_enrollment INTEGER;
BEGIN
    SELECT s.enrollment_limit
    INTO enroll_limit
    FROM section s
    WHERE s.sectionid = NEW.sectionid
      AND s.courseid = NEW.courseid
	  AND s.quarter = 'SPRING'
	  AND s.Year = 2018;

    SELECT COUNT(*)
    INTO current_enrollment
    FROM courseenrollment
    WHERE sectionid = NEW.sectionid
      AND courseid = NEW.courseid;

    IF current_enrollment >= enroll_limit THEN
        RAISE EXCEPTION 'Enrollment limit for the section has been reached.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_enrollment_limit
BEFORE INSERT OR UPDATE ON courseenrollment
FOR EACH ROW
EXECUTE FUNCTION trg_enrollment_limit();

CREATE OR REPLACE FUNCTION trg_check_professor_schedule()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM regular_meeting m
        JOIN section s ON m.sectionid = s.sectionid AND m.courseid = s.courseid
        WHERE m.quarter = 'SPRING' AND m.year = 2018
          AND s.facultyname = (
              SELECT facultyname
              FROM section
              WHERE sectionid = NEW.sectionid
                AND courseid = NEW.courseid
                AND quarter = 'SPRING'
                AND year = 2018
          )
          AND (m.day_of_week SIMILAR TO '%' || NEW.day_of_week || '%' OR '%' || m.day_of_week || '%' SIMILAR TO NEW.day_of_week)
          AND (
                 (NEW.end_time <= m.end_time AND NEW.end_time >= m.start_time)
              OR (m.start_time <= NEW.start_time AND m.end_time >= NEW.start_time)
              OR (NEW.start_time <= m.start_time AND NEW.end_time >= m.end_time)
          )
    ) THEN
        RAISE EXCEPTION 'Professor has another section at the same time.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_check_professor_schedule
BEFORE INSERT OR UPDATE ON regular_meeting
FOR EACH ROW
EXECUTE FUNCTION trg_check_professor_schedule();






CREATE TABLE CPQG (
    courseid VARCHAR(50),
    facultyname VARCHAR(50),
    quarter VARCHAR(20),
	YEAR INT,
    grade VARCHAR(10),
    count INTEGER,
    PRIMARY KEY (courseid, facultyname, quarter, YEAR, grade)
);


INSERT INTO CPQG (courseid, facultyname, quarter, YEAR, grade, count)
SELECT
    pc.courseid,
    pc.facultyname,
    pc.quarter,
	pc.year,
    'A' AS grade,
    COUNT(*) AS count
FROM PASTCLASS pc
WHERE pc.grade IN ('A', 'A-', 'A+')
GROUP BY pc.courseid, pc.facultyname, pc.quarter, pc.year
UNION ALL
SELECT
    pc.courseid,
    pc.facultyname,
    pc.quarter,
	pc.year,
    'B' AS grade,
    COUNT(*) AS count
FROM PASTCLASS pc
WHERE pc.grade IN ('B', 'B-', 'B+')
GROUP BY pc.courseid, pc.facultyname, pc.quarter,pc.year
UNION ALL
SELECT
    pc.courseid,
    pc.facultyname,
    pc.quarter,
	pc.year,
    'C' AS grade,
    COUNT(*) AS count
FROM PASTCLASS pc
WHERE pc.grade IN ('C', 'C-', 'C+')
GROUP BY pc.courseid, pc.facultyname, pc.quarter,pc.year
UNION ALL
SELECT
    pc.courseid,
    pc.facultyname,
    pc.quarter,
	pc.year,
    'D' AS grade,
    COUNT(*) AS count
FROM PASTCLASS pc
WHERE pc.grade = 'D'
GROUP BY pc.courseid, pc.facultyname, pc.quarter,pc.year
UNION ALL
SELECT
    pc.courseid,
    pc.facultyname,
    pc.quarter,
	pc.year,
    'other' AS grade,
    COUNT(*) AS count
FROM PASTCLASS pc
WHERE pc.grade NOT IN ('A', 'A-', 'A+', 'B', 'B-', 'B+', 'C', 'C-', 'C+', 'D', 'IN')
GROUP BY pc.courseid, pc.facultyname, pc.quarter,pc.year;




CREATE OR REPLACE FUNCTION trg_cpqg_after_insert()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO CPQG (courseid, facultyname, quarter, year, grade, count)
    VALUES (
        NEW.courseid,
        NEW.facultyname,
        NEW.quarter,
        NEW.year,
        CASE
            WHEN NEW.grade IN ('A', 'A-', 'A+') THEN 'A'
            WHEN NEW.grade IN ('B', 'B-', 'B+') THEN 'B'
            WHEN NEW.grade IN ('C', 'C-', 'C+') THEN 'C'
            WHEN NEW.grade = 'D' THEN 'D'
            ELSE 'other'
        END,
        1
    )
    ON CONFLICT (courseid, facultyname, quarter, year, grade)
    DO UPDATE SET count = CPQG.count + 1;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;








CREATE OR REPLACE FUNCTION trg_cpqg_after_update()
RETURNS TRIGGER AS $$
BEGIN
    IF (OLD.grade != NEW.grade) THEN
        UPDATE CPQG
        SET count = count - 1
        WHERE courseid = OLD.courseid
          AND facultyname = OLD.facultyname
          AND quarter = OLD.quarter
          AND year = OLD.year
          AND grade = CASE
                          WHEN OLD.grade IN ('A', 'A-', 'A+') THEN 'A'
                          WHEN OLD.grade IN ('B', 'B-', 'B+') THEN 'B'
                          WHEN OLD.grade IN ('C', 'C-', 'C+') THEN 'C'
                          WHEN OLD.grade = 'D' THEN 'D'
                          ELSE 'other'
                      END;




        INSERT INTO CPQG (courseid, facultyname, quarter,year, grade, count)
        VALUES (
            NEW.courseid,
            NEW.facultyname,
            NEW.quarter,
	NEW.year,
            CASE
                WHEN NEW.grade IN ('A', 'A-', 'A+') THEN 'A'
                WHEN NEW.grade IN ('B', 'B-', 'B+') THEN 'B'
                WHEN NEW.grade IN ('C', 'C-', 'C+') THEN 'C'
                WHEN NEW.grade = 'D' THEN 'D'
                ELSE 'other'
            END,
            1
        )
        ON CONFLICT (courseid, facultyname, quarter, year, grade)
        DO UPDATE SET count = CPQG.count + 1;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION trg_cpqg_after_delete()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE CPQG
    SET count = count - 1
    WHERE courseid = OLD.courseid
      AND facultyname = OLD.facultyname
      AND quarter = OLD.quarter
     AND year = OLD.year
      AND grade = CASE
                      WHEN OLD.grade IN ('A', 'A-', 'A+') THEN 'A'
                      WHEN OLD.grade IN ('B', 'B-', 'B+') THEN 'B'
                      WHEN OLD.grade IN ('C', 'C-', 'C+') THEN 'C'
                      WHEN OLD.grade = 'D' THEN 'D'
                      ELSE 'other'
                  END;




    RETURN OLD;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER trg_cpqg_after_insert
AFTER INSERT ON PASTCLASS
FOR EACH ROW
EXECUTE FUNCTION trg_cpqg_after_insert();
CREATE OR REPLACE TRIGGER trg_cpqg_after_update
AFTER UPDATE ON PASTCLASS
FOR EACH ROW
EXECUTE FUNCTION trg_cpqg_after_update();
CREATE OR REPLACE TRIGGER trg_cpqg_after_delete
AFTER DELETE ON PASTCLASS
FOR EACH ROW
EXECUTE FUNCTION trg_cpqg_after_delete();





CREATE TABLE CPG (
    courseid VARCHAR(50),
    facultyname VARCHAR(50),
    grade VARCHAR(10),
    count INTEGER,
    PRIMARY KEY (courseid, facultyname, grade)
);




INSERT INTO CPG (courseid, facultyname, grade, count)
SELECT
    courseid,
    facultyname,
    grade,
    COUNT(*) AS count
FROM PASTCLASS
GROUP BY courseid, facultyname, grade;




CREATE OR REPLACE FUNCTION trg_cpg_after_insert()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO CPG (courseid, facultyname, grade, count)
    VALUES (NEW.courseid, NEW.facultyname, NEW.grade, 1)
    ON CONFLICT (courseid, facultyname, grade)
    DO UPDATE SET count = CPG.count + 1;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION trg_cpg_after_update()
RETURNS TRIGGER AS $$
BEGIN
    IF (OLD.grade != NEW.grade) THEN
        UPDATE CPG
        SET count = count - 1
        WHERE courseid = OLD.courseid
          AND facultyname = OLD.facultyname
          AND grade = OLD.grade;

        INSERT INTO CPG (courseid, facultyname, grade, count)
        VALUES (NEW.courseid, NEW.facultyname, NEW.grade, 1)
        ON CONFLICT (courseid, facultyname, grade)
        DO UPDATE SET count = CPG.count + 1;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION trg_cpg_after_delete()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE CPG
    SET count = count - 1
    WHERE courseid = OLD.courseid
      AND facultyname = OLD.facultyname
      AND grade = OLD.grade;




    RETURN OLD;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER trg_cpg_after_insert
AFTER INSERT ON PASTCLASS
FOR EACH ROW
EXECUTE FUNCTION trg_cpg_after_insert();
CREATE OR REPLACE TRIGGER trg_cpg_after_update
AFTER UPDATE ON PASTCLASS
FOR EACH ROW
EXECUTE FUNCTION trg_cpg_after_update();
CREATE OR REPLACE TRIGGER trg_cpg_after_delete
AFTER DELETE ON PASTCLASS
FOR EACH ROW
EXECUTE FUNCTION trg_cpg_after_delete();
